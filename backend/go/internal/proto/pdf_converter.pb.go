// proto/pdf_converter.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: pdf_converter.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PDFChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PDFChunk) Reset() {
	*x = PDFChunk{}
	mi := &file_pdf_converter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PDFChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PDFChunk) ProtoMessage() {}

func (x *PDFChunk) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_converter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PDFChunk.ProtoReflect.Descriptor instead.
func (*PDFChunk) Descriptor() ([]byte, []int) {
	return file_pdf_converter_proto_rawDescGZIP(), []int{0}
}

func (x *PDFChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConvertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConvertResponse) Reset() {
	*x = ConvertResponse{}
	mi := &file_pdf_converter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertResponse) ProtoMessage() {}

func (x *ConvertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_converter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertResponse.ProtoReflect.Descriptor instead.
func (*ConvertResponse) Descriptor() ([]byte, []int) {
	return file_pdf_converter_proto_rawDescGZIP(), []int{1}
}

func (x *ConvertResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_pdf_converter_proto protoreflect.FileDescriptor

const file_pdf_converter_proto_rawDesc = "" +
	"\n" +
	"\x13pdf_converter.proto\x12\x03pdf\"\x1e\n" +
	"\bPDFChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"%\n" +
	"\x0fConvertResponse\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text2@\n" +
	"\fPDFConverter\x120\n" +
	"\aConvert\x12\r.pdf.PDFChunk\x1a\x14.pdf.ConvertResponse(\x01B\n" +
	"Z\b./;protob\x06proto3"

var (
	file_pdf_converter_proto_rawDescOnce sync.Once
	file_pdf_converter_proto_rawDescData []byte
)

func file_pdf_converter_proto_rawDescGZIP() []byte {
	file_pdf_converter_proto_rawDescOnce.Do(func() {
		file_pdf_converter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pdf_converter_proto_rawDesc), len(file_pdf_converter_proto_rawDesc)))
	})
	return file_pdf_converter_proto_rawDescData
}

var file_pdf_converter_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pdf_converter_proto_goTypes = []any{
	(*PDFChunk)(nil),        // 0: pdf.PDFChunk
	(*ConvertResponse)(nil), // 1: pdf.ConvertResponse
}
var file_pdf_converter_proto_depIdxs = []int32{
	0, // 0: pdf.PDFConverter.Convert:input_type -> pdf.PDFChunk
	1, // 1: pdf.PDFConverter.Convert:output_type -> pdf.ConvertResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pdf_converter_proto_init() }
func file_pdf_converter_proto_init() {
	if File_pdf_converter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pdf_converter_proto_rawDesc), len(file_pdf_converter_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdf_converter_proto_goTypes,
		DependencyIndexes: file_pdf_converter_proto_depIdxs,
		MessageInfos:      file_pdf_converter_proto_msgTypes,
	}.Build()
	File_pdf_converter_proto = out.File
	file_pdf_converter_proto_goTypes = nil
	file_pdf_converter_proto_depIdxs = nil
}
